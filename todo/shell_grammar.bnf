
# 21sh - Grammar (Bash based)

<letter>			::=	[a-z]
					|	[A-Z]

<digit>				::= [0-9]

<number>			::=	<digit>
					|	<number> <digit>

<word>				::=	<letter>
					|	<word> <letter>
					|	<word> '_'

<word_list>			::=	<word>
					|	<word_list> <word>

<assign_word>		::= <word> '=' <word>

<redir>				::=	'>' <word>
					|	'<' <word>
					|	<number> '>' <word>
					|	<number> '<' <word>
					|	'>>' <word>
					|	<number> '>>' <word>
					|	'<<' <word>
					|	<number> '<<' <word>
					|	'<&' <number>
					|	<number> '<&' <number>
					|	'>&' <number>
					|	<number> '>&' <number>
					|	'<&' <word>
					|	<number> '<&' <word>
					|	'>&' <word>
					|	<number> '>&' <word>
					|	'<<-' <word>
					|	<number> '<<-' <word>
					|	'>&' '-'
					|	<number> '>&' '-'
					|	'<&' '-'
					|	<number> '<&' '-'
					|	'&>' <word>
					|	<number> '<>' <word>
					|	'<>' <word>
					|	'>|' <word>
					|	<number> '>|' <word>

<simp_cmd_elem> 	::= <word>
					|	<assign_word>
					|	<redir>

<redir_list>		::= <redir>
					|	<redir_list> <redir>

<simp_cmd>			::=	<simp_cmd_elem>
					|	<simp_cmd> <simp_cmd_elem>

<cmd>				::=	<simp_cmd>
					|	<sh_cmd>
					|	<sh_cmd> <redir_list>

<sh_cmd> 			::=	<for_cmd>
					|	<case_cmd>
					|	while <comp_list> do <comp_list> done
					|	until <comp_list> do <comp_list> done
					|	<select_cmd>
					|	<if_cmd>
					|	<subsh>
					|	<group_cmd>
					|	<function_def>

<for_cmd>			::=	for <word> <newline_list> do <comp_list> done
					|	for <word> <newline_list> '{' <comp_list> '}'
					|	for <word> ';' <newline_list> do <comp_list> done
					|	for <word> ';' <newline_list> '{' <comp_list> '}'
					|	for <word> <newline_list> in <word_list> <list_terminator>
							 <newline_list> do <comp_list> done
					|	for <word> <newline_list> in <word_list> <list_terminator>
							 <newline_list> '{' <comp_list> '}'

<select_cmd> ::=	select <word> <new
					 |	select <word> <newline_list> '{' <list> '}'
					 |	select <word> ';' <newline_list> do <list> done
					 |	select <word> ';' <newline_list> '{' list '}'
					 |	select <word> <newline_list> in <word_list>
							 <list_terminator> <newline_list> do <list> done
					 |	select <word> <newline_list> in <word_list>
							 <list_terminator> <newline_list> '{' <list> '}'

<case_cmd>			::=	case <word> <newline_list> in <newline_list> esac
					 |	case <word> <newline_list> in <case_clause_sequence>
							 <newline_list> esac
					 |	case <word> <newline_list> in <case_clause> esac

<function_def>		::=	<word> '(' ')' <newline_list> <group_cmd>
					 |	function <word> '(' ')' <newline_list> <group_cmd>
					 |	function <word> <newline_list> <group_cmd>

<subsh>				::=	'(' <comp_list> ')'

<if_cmd>			::= if <comp_list> then <comp_list> fi
					| if <comp_list> then <comp_list> else <comp_list> fi
					| if <comp_list> then <comp_list> <elif_clause> fi

<group_cmd>			::=	'{' <list> '}'

<elif_clause> ::= elif <comp_list> then <comp_list>
			 | elif <comp_list> then <comp_list> else <comp_list>
			 | elif <comp_list> then <comp_list> <elif_clause>

<case_clause> ::=	<pattern_list>
				|	<case_clause_sequence> <pattern_list>

<pattern_list> ::=	<newline_list> <pattern> ')' <comp_list>
				 |	<newline_list> <pattern> ')' <newline_list>
				 |	<newline_list> '(' <pattern> ')' <comp_list>
				 |	<newline_list> '(' <pattern> ')' <newline_list>

<case_clause_sequence> ::=	<pattern_list> ';;'
						 |	<case_clause_sequence> <pattern_list> ';;'

<pattern> ::=	<word>
			|	<pattern> '|' <word>


<list> ::=	 <newline_list> <list0>

<comp_list> ::=	<list>
					|	<newline_list> <list1>

<list0> ::=	 <list1> '\n' <newline_list>
			 |	<list1> '&' <newline_list>
			 |	<list1> ';' <newline_list>

<list1> ::=	 <list1> '&&' <newline_list> <list1>
			 |	<list1> '||' <newline_list> <list1>
			 |	<list1> '&' <newline_list> <list1>
			 |	<list1> ';' <newline_list> <list1>
			 |	<list1> '\n' <newline_list> <list1>
			 |	<pipeline_cmd>

<list_terminator> ::= '\n'
					 |	';'

<newline_list> ::=
					|	<newline_list> '\n'

<simple_list> ::=	<simple_list1>
				|	<simple_list1> '&'
				|	<simple_list1> ';'

<simple_list1> ::=	<simple_list1> '&&' <newline_list> <simple_list1>
				 |	<simple_list1> '||' <newline_list> <simple_list1>
				 |	<simple_list1> '&' <simple_list1>
				 |	<simple_list1> ';' <simple_list1>
				 |	<pipeline_cmd>

<pipeline_cmd> ::= <pipeline>
					|	'!' <pipeline>
					|	<timespec> <pipeline>
					|	<timespec> '!' <pipeline>
					|	'!' <timespec> <pipeline>

<pipeline> ::=
			<pipeline> '|' <newline_list> <pipeline>
		 |	<cmd>

<time_opt> ::= '-p'

<timespec> ::=	time
			 |	time <time_opt>
