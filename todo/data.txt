

Abbreviation:
===================
Lexer
	- x:		lex (prefix)
	- tk:		token
	- ts:		token_state (TS::prefix in enum)
			- G:	greater '>'
			- L:	less '<'
			- E:	equal '='
			- A:	and '&'
			- O:	or '|'
			- P:	plus '+'
			- M:	minus(dash) '-'
			- N:	not '!'
			- D:	dollar sign '$'
			- SC:	semi-colon ';'
			- PL:	left parentheses '('
			- PR:	right parenthese ')'
			- CBL:	left parentheses '{'
			- CBR:	right parenthese '}'
			- BL:	left parentheses '['
			- BR:	right parenthese ']'
			- NL:	newline '\ni'
			- SQ:	single quote '\''
			- DQ:	double quote '\"'
			- SH:	slash '/'
			- BSH:	back-slach '\\'
			- AES:	star (aestrick)
			- T:	tilde '~'
			- AT:	at-sign '@'

token:
	- type: enum
	- beg_i: int
	- len : int

=============================
Data Struct
-----------------------------
dynamic str
-----------------------------
struct: dstr
	char	*str;
	ssize_t	max;

func:
	ssize_t		get_maxlen

	t_dstr		ft_dstr_new(ssize_t max_len);
	t_dstr		ft_dstr_dup(t_dstr *dstr)
	t_dstr		ft_dstr_dup_free(t_dstr *dstr)
	int			ft_dstr_free(t_dstr **dstr)

	int			ft_dstr_ins_str(t_dstr *dstr, ssize_t ind, char *str)
		:: if (ind < 0 ) ==> append

	int			ft_dstr_ins_nstr(t_dstr *dstr, ssize_t ind, char *str, int n)
		:: n := max chars from str
		:: if (ind < 0 ) ==> append

	int			ft_dstr_ins_str_free(t_dstr *dstr, ssize_t ind, char **str)
		:: if (ind < 0 ) ==> append

	int			ft_dstr_ins_ch(t_dstr *dstr, ssize_t ind, char ch)
		:: if (ind < 0 ) ==> append

	int			ft_dstr_del_n(t_dstr *dstr, ssize_t i, ssize_t n)
		:: deletes n char starting from i
		:: re-arrange string if necessary

	int			ft_del

-----------------------------
dynamic array of strings
-----------------------------
struct: t_dastr :: t_dastr
	t_dstr	**txt;
	ssize_t	max_lines;

func:
	int			ft_dastr_new(ssize_t max_lines)
	t_dastr		*ft_dastr_dup(t_dastr *dastr)
	t_dastr		*ft_dastr_dup_free(t_dastr *dastr)

	t_dstr		*ft_dastr_get_line(ssize_t il)
		:: (il == -1)==> get last line
		:: (il == -2)==> get current line
		:: (il >= max_lines)=> NULL

	int			ft_dastr_ins_str(t_dastr *dastr, ssize_t i, char *str)
	int			ft_dastr_ins_str_free(t_dastr *dastr, ssize_t i, char **str)
		:: affect on cc

	int			ft_dastr_ins_dstr(t_dastr *dastr, ssize_t i, t_dstr *dstr)
	int			ft_dastr_ins_dstr_free(t_dastr *dastr, ssize_t i, t_dstr **dstr)
		:: affect on cl

	int			ft_dastr_ins_dstrs(t_dastr *dastr, ssize_t i, t_dstr **dstrs, ssize_t n)
	int			ft_dastr_ins_dstrs_free(t_dastr *dastr, ssize_t i, t_dstr ***dstr, ssize_t n)
		:: affect on cl

	int			ft_dastr_del_n(t_dastr *dastr, ssize_t i, ssize_t n)
		:: affect on cl
		:: deletes n line starting from i
		:: re-arrange string if necessary

-----------------------------
dynamic array of strings
-----------------------------
struct: t_dta :: t_dta
	t_dstr	**txt;
	ssize_t	max_lines;
